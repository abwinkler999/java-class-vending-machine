package com.awesomevendingco.vendingmachine;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import org.junit.Before;
import org.junit.Test;

import com.awesomevendingco.vendingmachine.VendingMachine;

public class VendingMachineTest {

    private VendingMachine machine;

    @Before
    public void setup() {
        machine = new VendingMachine();
        machine.setCoinTranslator(new MockCoinTranslator());
    }

    @Test
    public void it_displays_balance_of_zero_when_no_coins_inserted() {
        machine.insertCoin("COIN");
        assertEquals("0.00", machine.getDisplay());
    }

    @Test
    public void it_displays_message_of_insert_coin_when_no_coins_inserted() {
    	assertEquals("INSERT COIN", machine.getMessage());
    }
    
    @Test
    public void it_displays_balance_with_value_of_insert_coin() {
        machine.insertCoin("COIN");
        assertEquals("0.45", machine.getDisplay());
    }

    @Test
    public void it_displays_balance_with_values_of_multiple_inserted_coins() {
        machine.insertCoin("COIN");
        machine.insertCoin("COIN");
        assertEquals("0.90", machine.getDisplay());
    }

    @Test 
    public void itDisplaysMessageOfInsertCoinWhenSomeCoinsInserted() {
    	machine.insertCoin("COIN");
    	machine.insertCoin("COIN");
    	assertEquals("INSERT COIN", machine.getMessage());
    }
    
    @Test
    public void itPutsInvalidCoinInTheCoinReturn() {
        machine.insertCoin("BAD_COIN");
        assertTrue(machine.getCoinReturn().contains("BAD_COIN"));
    }

    @Test
    public void itPutsMutipleInvalidCoinsInTheCoinReturn() {
        machine.insertCoin("BAD_COIN");
        machine.insertCoin("OTHER_BAD_COIN");
        assertTrue(machine.getCoinReturn().contains("BAD_COIN"));
        assertTrue(machine.getCoinReturn().contains("OTHER_BAD_COIN"));
        assertEquals(2, machine.getCoinReturn().size());
    }

}
